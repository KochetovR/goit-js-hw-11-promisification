{"version":3,"sources":["partials/task-01.js","partials/task-03.js","index.js"],"names":["delay","ms","Promise","resolved","setTimeout","logger","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","resolve","reject","canProcess","id","logSuccess","time","console","log","logError","warn","amount","then","catch"],"mappings":";;;AAAA,MAAMA,EAAQC,GACH,IAAIC,QAAQC,IACfC,WAAW,KACPD,EAASE,OAAOJ,KACjBA;;ACJX,MAAMK,EAA4B,CAACC,EAAKC,IAC7BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACjBb,MAAAA,EAAQM,EAA0B,IAAK,KAEtC,OAAA,IAAIJ,QAAS,CAACY,EAASC,KACpBC,MAAAA,EAAaP,KAAKE,SAAW,GAEnCP,WAAW,KACHY,GACAF,EAAQD,EAAYI,GAAIjB,GAE5Be,EAAOF,EAAYI,KAClBjB,MAaLkB,EAAa,CAACD,EAAIE,KACtBC,QAAQC,mBAAmBJ,kBAAmBE,OAC9CC,QAAQC,IAAIJ,IAGRK,EAAWL,IACfG,QAAQG,qCAAqCN,+BAa/CL,EAAgB,CAAEK,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETV,EAAgB,CAAEK,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETV,EAAgB,CAAEK,GAAI,GAAIO,OAAQ,KAC/BC,KAAKP,GACLQ,MAAMJ,GAETV,EAAgB,CAAEK,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ;;AC1DX,aAHA,QAAA,oBACA,QAAA,yBAEA,QAAA","file":"src.ad1d085d.js","sourceRoot":"../src","sourcesContent":["const delay = ms => {\n    return new Promise(resolved => {\n        setTimeout(() => {\n            resolved(logger(ms))\n        }, ms)\n    })\n  };\n  \n//   const logger = time => console.log(`Resolved after ${time}ms`);\n  \n//   // Вызовы функции для проверки\n//   delay(2000).then(logger); // Resolved after 2000ms\n//   delay(1000).then(logger); // Resolved after 1000ms\n//   delay(1500).then(logger); // Resolved after 1500ms","const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n  \n    return new Promise ((resolve, reject) => {\n        const canProcess = Math.random() > 0.3;\n        \n        setTimeout(() => {\n            if (canProcess) {\n                resolve(transaction.id, delay);\n            }             \n            reject(transaction.id);\n          }, delay);\n    });\n    // setTimeout(() => {\n    //   const canProcess = Math.random() > 0.3;\n  \n    //   if (canProcess) {\n    //     onSuccess(transaction.id, delay);\n    //   } else {\n    //     onError(transaction.id);\n    //   }\n    // }, delay);\n  };\n  \n  const logSuccess = (id, time) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n    console.log(id)\n  };\n  \n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n  \n  /*\n   * Работает так\n   */\n//   makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n//   makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n//   makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n//   makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n//   /*\n//    * Должно работать так\n//    */\n  makeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);","import './sass/main.scss';\nimport './partials/task-01.js';\n// import './partials/task-02.js';\nimport './partials/task-03.js';\n\n\n"]}